//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFSessions.Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InitData", ReplyAction="http://tempuri.org/IService1/InitDataResponse")]
        void InitData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InitData", ReplyAction="http://tempuri.org/IService1/InitDataResponse")]
        System.IAsyncResult BeginInitData(System.AsyncCallback callback, object asyncState);
        
        void EndInitData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IService1/AddData", ReplyAction="http://tempuri.org/IService1/AddDataResponse")]
        void AddData(string txt);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IService1/AddData", ReplyAction="http://tempuri.org/IService1/AddDataResponse")]
        System.IAsyncResult BeginAddData(string txt, System.AsyncCallback callback, object asyncState);
        
        void EndAddData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Collections.Generic.List<string> GetData();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.IAsyncResult BeginGetData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IService1/WaitFor", ReplyAction="http://tempuri.org/IService1/WaitForResponse")]
        void WaitFor(int sekunden);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IService1/WaitFor", ReplyAction="http://tempuri.org/IService1/WaitForResponse")]
        System.IAsyncResult BeginWaitFor(int sekunden, System.AsyncCallback callback, object asyncState);
        
        void EndWaitFor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        void Reset();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        System.IAsyncResult BeginReset(System.AsyncCallback callback, object asyncState);
        
        void EndReset(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFSessions.Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCFSessions.Client.ServiceReference1.IService1>, WCFSessions.Client.ServiceReference1.IService1 {
        
        private BeginOperationDelegate onBeginInitDataDelegate;
        
        private EndOperationDelegate onEndInitDataDelegate;
        
        private System.Threading.SendOrPostCallback onInitDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDataDelegate;
        
        private EndOperationDelegate onEndAddDataDelegate;
        
        private System.Threading.SendOrPostCallback onAddDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginWaitForDelegate;
        
        private EndOperationDelegate onEndWaitForDelegate;
        
        private System.Threading.SendOrPostCallback onWaitForCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetDelegate;
        
        private EndOperationDelegate onEndResetDelegate;
        
        private System.Threading.SendOrPostCallback onResetCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InitDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDataCompleted;
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WaitForCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetCompleted;
        
        public void InitData() {
            base.Channel.InitData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInitData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInitData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInitData(System.IAsyncResult result) {
            base.Channel.EndInitData(result);
        }
        
        private System.IAsyncResult OnBeginInitData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInitData(callback, asyncState);
        }
        
        private object[] OnEndInitData(System.IAsyncResult result) {
            this.EndInitData(result);
            return null;
        }
        
        private void OnInitDataCompleted(object state) {
            if ((this.InitDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InitDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InitDataAsync() {
            this.InitDataAsync(null);
        }
        
        public void InitDataAsync(object userState) {
            if ((this.onBeginInitDataDelegate == null)) {
                this.onBeginInitDataDelegate = new BeginOperationDelegate(this.OnBeginInitData);
            }
            if ((this.onEndInitDataDelegate == null)) {
                this.onEndInitDataDelegate = new EndOperationDelegate(this.OnEndInitData);
            }
            if ((this.onInitDataCompletedDelegate == null)) {
                this.onInitDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInitDataCompleted);
            }
            base.InvokeAsync(this.onBeginInitDataDelegate, null, this.onEndInitDataDelegate, this.onInitDataCompletedDelegate, userState);
        }
        
        public void AddData(string txt) {
            base.Channel.AddData(txt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddData(string txt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddData(txt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddData(System.IAsyncResult result) {
            base.Channel.EndAddData(result);
        }
        
        private System.IAsyncResult OnBeginAddData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string txt = ((string)(inValues[0]));
            return this.BeginAddData(txt, callback, asyncState);
        }
        
        private object[] OnEndAddData(System.IAsyncResult result) {
            this.EndAddData(result);
            return null;
        }
        
        private void OnAddDataCompleted(object state) {
            if ((this.AddDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDataAsync(string txt) {
            this.AddDataAsync(txt, null);
        }
        
        public void AddDataAsync(string txt, object userState) {
            if ((this.onBeginAddDataDelegate == null)) {
                this.onBeginAddDataDelegate = new BeginOperationDelegate(this.OnBeginAddData);
            }
            if ((this.onEndAddDataDelegate == null)) {
                this.onEndAddDataDelegate = new EndOperationDelegate(this.OnEndAddData);
            }
            if ((this.onAddDataCompletedDelegate == null)) {
                this.onAddDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDataCompleted);
            }
            base.InvokeAsync(this.onBeginAddDataDelegate, new object[] {
                        txt}, this.onEndAddDataDelegate, this.onAddDataCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetData() {
            return base.Channel.GetData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetData(callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync() {
            this.GetDataAsync(null);
        }
        
        public void GetDataAsync(object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, null, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        public void WaitFor(int sekunden) {
            base.Channel.WaitFor(sekunden);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginWaitFor(int sekunden, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWaitFor(sekunden, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndWaitFor(System.IAsyncResult result) {
            base.Channel.EndWaitFor(result);
        }
        
        private System.IAsyncResult OnBeginWaitFor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int sekunden = ((int)(inValues[0]));
            return this.BeginWaitFor(sekunden, callback, asyncState);
        }
        
        private object[] OnEndWaitFor(System.IAsyncResult result) {
            this.EndWaitFor(result);
            return null;
        }
        
        private void OnWaitForCompleted(object state) {
            if ((this.WaitForCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WaitForCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WaitForAsync(int sekunden) {
            this.WaitForAsync(sekunden, null);
        }
        
        public void WaitForAsync(int sekunden, object userState) {
            if ((this.onBeginWaitForDelegate == null)) {
                this.onBeginWaitForDelegate = new BeginOperationDelegate(this.OnBeginWaitFor);
            }
            if ((this.onEndWaitForDelegate == null)) {
                this.onEndWaitForDelegate = new EndOperationDelegate(this.OnEndWaitFor);
            }
            if ((this.onWaitForCompletedDelegate == null)) {
                this.onWaitForCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWaitForCompleted);
            }
            base.InvokeAsync(this.onBeginWaitForDelegate, new object[] {
                        sekunden}, this.onEndWaitForDelegate, this.onWaitForCompletedDelegate, userState);
        }
        
        public void Reset() {
            base.Channel.Reset();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReset(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReset(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReset(System.IAsyncResult result) {
            base.Channel.EndReset(result);
        }
        
        private System.IAsyncResult OnBeginReset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginReset(callback, asyncState);
        }
        
        private object[] OnEndReset(System.IAsyncResult result) {
            this.EndReset(result);
            return null;
        }
        
        private void OnResetCompleted(object state) {
            if ((this.ResetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetAsync() {
            this.ResetAsync(null);
        }
        
        public void ResetAsync(object userState) {
            if ((this.onBeginResetDelegate == null)) {
                this.onBeginResetDelegate = new BeginOperationDelegate(this.OnBeginReset);
            }
            if ((this.onEndResetDelegate == null)) {
                this.onEndResetDelegate = new EndOperationDelegate(this.OnEndReset);
            }
            if ((this.onResetCompletedDelegate == null)) {
                this.onResetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetCompleted);
            }
            base.InvokeAsync(this.onBeginResetDelegate, null, this.onEndResetDelegate, this.onResetCompletedDelegate, userState);
        }
    }
}
